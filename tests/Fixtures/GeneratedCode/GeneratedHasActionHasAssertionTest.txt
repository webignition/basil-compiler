use PHPUnit\Framework\TestCase;
use webignition\BaseBasilTestCase\Statement;
use webignition\DomElementIdentifier\ElementIdentifier;

class GeneratedHasActionHasAssertionTest extends TestCase
{
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();
        self::$client->request('GET', 'http://example.com');
        self::setBasilTestPath('with-action-and-assertion.yml');
    }

    public function testBdc4b8bd83e5660d1c62908dc7a7c43a()
    {
        $this->setBasilStepName('step one');

        // $".selector" exists <- click $".selector"
        $statement = Statement::createAssertion('$".selector" exists');
        $this->currentStatement = $statement;
        $has = $this->navigator->hasOne(ElementIdentifier::fromJson('{"locator":".selector"}'));
        $this->assertTrue($has, '{"assertion":{"source":"$\\".selector\\" exists","identifier":"$\\".selector\\"","comparison":"exists"}}');
        $this->completedStatements[] = $statement;

        // click $".selector"
        $statement = Statement::createAction('click $".selector"');
        $this->currentStatement = $statement;
        $element = $this->navigator->findOne(ElementIdentifier::fromJson('{"locator":".selector"}'));
        $element->click();
        $this->completedStatements[] = $statement;

        // $page.title is "Page Title"
        $statement = Statement::createAssertion('$page.title is "Page Title"');
        $this->currentStatement = $statement;
        $expected = "Page Title" ?? null;
        $examined = self::$client->getTitle() ?? null;
        $this->assertEquals($expected, $examined);
        $this->completedStatements[] = $statement;
    }
}