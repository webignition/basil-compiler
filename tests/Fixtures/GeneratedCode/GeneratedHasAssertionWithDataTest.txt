use PHPUnit\Framework\TestCase;

class GeneratedHasAssertionWithDataTest extends TestCase
{
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();
        self::$client->request('GET', 'http://example.com');
        self::setBasilTestPath('with-action-and-assertion-utilising-data.yml');
    }

    /**
     * @dataProvider Bdc4b8bd83e5660d1c62908dc7a7c43aDataProvider
     */
    public function testBdc4b8bd83e5660d1c62908dc7a7c43a($expected_title)
    {
        $this->setBasilStepName('step one');

        // $page.title is $data.expected_title
        $this->handledStatements[] = $this->assertionFactory->createFromJson('{
            "statement-type": "assertion",
            "source": "$page.title is $data.expected_title",
            "identifier": "$page.title",
            "operator": "is",
            "value": "$data.expected_title"
        }');
        $this->setExpectedValue($expected_title ?? null);
        $this->setExaminedValue(self::$client->getTitle() ?? null);
        $this->assertEquals(
            $this->getExpectedValue(),
            $this->getExaminedValue()
        );
    }

    public function Bdc4b8bd83e5660d1c62908dc7a7c43aDataProvider()
    {
        return [
            'setZero' => [
                'expected_title' => 'Page Title',
            ],
        ];
    }
}